{"ast":null,"code":"import { EditorState, ContentState, SelectionState, CompositeDecorator, getDefaultKeyBinding, RichUtils, Editor, DefaultDraftBlockRenderMap } from 'draft-js';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable, { List, Map } from 'immutable';\n/**\n * Create an editor state with some text in it already\n */\n\nfunction createEditorStateWithText(text) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (EditorState.createWithText) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return EditorState.createWithText(text);\n  }\n\n  return EditorState.createWithContent(ContentState.createFromText(text));\n} // This code originally has been copied from Recompose\n// https://github.com/acdlite/recompose/blob/master/src/packages/recompose/compose.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction composeDecorators() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  var last = funcs[funcs.length - 1];\n  return function () {\n    var result = last.apply(void 0, arguments);\n\n    for (var i = funcs.length - 2; i >= 0; i -= 1) {\n      var f = funcs[i];\n      result = f(result);\n    }\n\n    return result;\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Returns a new EditorState where the Selection is at the end.\n *\n * This ensures to mimic the textarea behaviour where the Selection is placed at\n * the end. This is needed when blocks (like stickers or other media) are added\n * without the editor having had focus yet. It still works to place the\n * Selection at a specific location by clicking on the text.\n */\n\n\nfunction moveSelectionToEnd(editorState) {\n  var content = editorState.getCurrentContent();\n  var blockMap = content.getBlockMap();\n  var key = blockMap.last().getKey();\n  var length = blockMap.last().getLength();\n  var selection = new SelectionState({\n    anchorKey: key,\n    anchorOffset: length,\n    focusKey: key,\n    focusOffset: length\n  });\n  return EditorState.acceptSelection(editorState, selection);\n}\n\nfunction createCompositeDecorator(decorators, getEditorState, setEditorState) {\n  var convertedDecorators = List(decorators).map(function (decorator) {\n    var Component = decorator.component;\n\n    var DecoratedComponent = function DecoratedComponent(props) {\n      return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n        getEditorState: getEditorState,\n        setEditorState: setEditorState\n      }));\n    };\n\n    return _extends({}, decorator, {\n      component: DecoratedComponent\n    });\n  }).toJS();\n  return new CompositeDecorator(convertedDecorators);\n}\n\nvar KEY_SEPARATOR = '-';\n\nvar MultiDecorator = /*#__PURE__*/function () {\n  function MultiDecorator(decorators) {\n    this.decorators = void 0;\n    this.decorators = Immutable.List(decorators);\n  }\n  /**\n   * Return list of decoration IDs per character\n   */\n\n\n  var _proto = MultiDecorator.prototype;\n\n  _proto.getDecorations = function getDecorations(block, contentState) {\n    var decorations = new Array(block.getText().length).fill(null);\n    this.decorators.forEach(function (decorator, i) {\n      var subDecorations = decorator.getDecorations(block, contentState);\n      subDecorations.forEach(function (key, offset) {\n        if (!key) {\n          return;\n        }\n\n        decorations[offset] = i + KEY_SEPARATOR + key;\n      });\n    });\n    return Immutable.List(decorations);\n  }\n  /**\n   * Return component to render a decoration\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ;\n\n  _proto.getComponentForKey = function getComponentForKey(key) {\n    var decorator = this.getDecoratorForKey(key);\n    return decorator.getComponentForKey(MultiDecorator.getInnerKey(key));\n  }\n  /**\n   * Return props to render a decoration\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  ;\n\n  _proto.getPropsForKey = function getPropsForKey(key) {\n    var decorator = this.getDecoratorForKey(key);\n    return decorator.getPropsForKey(MultiDecorator.getInnerKey(key));\n  }\n  /**\n   * Return a decorator for a specific key\n   */\n  ;\n\n  _proto.getDecoratorForKey = function getDecoratorForKey(key) {\n    var parts = key.split(KEY_SEPARATOR);\n    var index = Number(parts[0]);\n    return this.decorators.get(index);\n  }\n  /**\n   * Return inner key for a decorator\n   */\n  ;\n\n  MultiDecorator.getInnerKey = function getInnerKey(key) {\n    var parts = key.split(KEY_SEPARATOR);\n    return parts.slice(1).join(KEY_SEPARATOR);\n  };\n\n  return MultiDecorator;\n}(); // @see https://github.com/facebook/draft-js/blob/master/src/model/decorators/DraftDecoratorType.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar decoratorIsCustom = function decoratorIsCustom(decorator) {\n  return typeof decorator.getDecorations === 'function' && typeof decorator.getComponentForKey === 'function' && typeof decorator.getPropsForKey === 'function';\n};\n\nvar getDecoratorsFromProps = function getDecoratorsFromProps(_ref) {\n  var decorators = _ref.decorators,\n      _ref$plugins = _ref.plugins,\n      plugins = _ref$plugins === void 0 ? [] : _ref$plugins;\n  return List([{\n    decorators: decorators\n  }].concat(plugins)).filter(function (plugin) {\n    return (plugin == null ? void 0 : plugin.decorators) !== undefined;\n  }).flatMap(function (plugin) {\n    return plugin == null ? void 0 : plugin.decorators;\n  });\n};\n\nfunction resolveDecorators(props, getEditorState, onChange) {\n  var decorators = getDecoratorsFromProps(props);\n  var compositeDecorator = createCompositeDecorator(decorators.filter(function (decorator) {\n    return !decoratorIsCustom(decorator);\n  }), getEditorState, onChange);\n  var customDecorators = decorators.filter(function (decorator) {\n    return decoratorIsCustom(decorator);\n  });\n  return new MultiDecorator(customDecorators.push(compositeDecorator));\n}\n\nfunction keyBindingFn(event) {\n  return getDefaultKeyBinding(event);\n}\n\nfunction handleKeyCommand(command, editorState, eventTimeStamp, _ref) {\n  var setEditorState = _ref.setEditorState;\n  var newState;\n\n  switch (command) {\n    case 'backspace':\n    case 'backspace-word':\n    case 'backspace-to-start-of-line':\n      newState = RichUtils.onBackspace(editorState);\n      break;\n\n    case 'delete':\n    case 'delete-word':\n    case 'delete-to-end-of-block':\n      newState = RichUtils.onDelete(editorState);\n      break;\n\n    default:\n      return 'not-handled';\n  }\n\n  if (newState != null) {\n    setEditorState(newState);\n    return 'handled';\n  }\n\n  return 'not-handled';\n}\n\nfunction isEditorHandleKey(key) {\n  return key.startsWith('handle');\n}\n\nfunction isEditorEventKey(key) {\n  return key.startsWith('on');\n}\n\nfunction isEditorFnKey(key) {\n  return key.endsWith('Fn');\n}\n\nfunction blockRendererFnHook(plugins, pluginMethods) {\n  return function (block) {\n    var resultBlock = {\n      props: {}\n    };\n    plugins.forEach(function (plugin) {\n      if (typeof plugin.blockRendererFn !== 'function') {\n        return;\n      }\n\n      var result = plugin.blockRendererFn(block, pluginMethods);\n\n      if (result !== undefined && result !== null) {\n        var pluginProps = result.props,\n            pluginRest = _objectWithoutPropertiesLoose(result, [\"props\"]); // eslint-disable-line no-use-before-define\n\n\n        var _resultBlock = resultBlock,\n            props = _resultBlock.props,\n            rest = _objectWithoutPropertiesLoose(_resultBlock, [\"props\"]); // eslint-disable-line no-use-before-define\n\n\n        resultBlock = _extends({}, rest, pluginRest, {\n          props: _extends({}, props, pluginProps)\n        });\n      }\n    });\n    return resultBlock.component ? resultBlock : false;\n  };\n}\n\nfunction blockStyleFnHook(plugins, pluginMethods) {\n  return function (block) {\n    var styles = [];\n    plugins.forEach(function (plugin) {\n      if (typeof plugin.blockStyleFn !== 'function') {\n        return;\n      }\n\n      var result = plugin.blockStyleFn(block, pluginMethods);\n\n      if (result !== undefined && result !== null) {\n        styles.push(result);\n      }\n    });\n    return styles.join(' ');\n  };\n}\n\nfunction customStyleFnHook(plugins, pluginMethods) {\n  return function (style, block) {\n    var result;\n    var wasHandled = plugins.some(function (plugin) {\n      if (typeof plugin.customStyleFn !== 'function') {\n        return false;\n      }\n\n      result = plugin.customStyleFn(style, block, pluginMethods);\n      return result !== undefined;\n    });\n    return wasHandled && result ? result : {};\n  };\n}\n\nfunction keyBindingFnHook(plugins, pluginMethods) {\n  return function (event) {\n    var result = null;\n    var wasHandled = plugins.some(function (plugin) {\n      if (typeof plugin.keyBindingFn !== 'function') {\n        return false;\n      }\n\n      result = plugin.keyBindingFn(event, pluginMethods);\n      return result !== undefined;\n    });\n    return wasHandled ? result : null;\n  };\n}\n\nfunction createHandleHooks(methodName, plugins, pluginMethods) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return plugins.some(function (plugin) {\n      var fn = plugin[methodName];\n      return (// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        typeof fn === 'function' && fn.apply(void 0, args.concat([pluginMethods])) === 'handled'\n      );\n    }) ? 'handled' : 'not-handled';\n  };\n}\n\nfunction createEventHooks(methodName, plugins, pluginMethods) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return plugins.some(function (plugin) {\n      var fn = plugin[methodName]; // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n\n      return typeof fn === 'function' && fn.apply(void 0, args.concat([pluginMethods])) === true;\n    });\n  };\n}\n\nfunction createPluginHooks(plugins, pluginFunction) {\n  var pluginHooks = {}; //onchange is here ignored\n\n  var handledAttributes = new Set(['onChange']);\n  plugins.forEach(function (plugin) {\n    Object.keys(plugin).forEach(function (attrName) {\n      // if `attrName` has been added as a hook key already, ignore this one\n      if (handledAttributes.has(attrName)) {\n        return;\n      }\n\n      handledAttributes.add(attrName);\n\n      if (isEditorEventKey(attrName)) {\n        pluginHooks[attrName] = createEventHooks(attrName, plugins, pluginFunction);\n      } else if (isEditorHandleKey(attrName)) {\n        pluginHooks[attrName] = createHandleHooks(attrName, plugins, pluginFunction);\n      } else if (isEditorFnKey(attrName)) {\n        if (attrName === 'blockRendererFn') {\n          pluginHooks.blockRendererFn = blockRendererFnHook(plugins, pluginFunction);\n        } else if (attrName === 'blockStyleFn') {\n          pluginHooks.blockStyleFn = blockStyleFnHook(plugins, pluginFunction);\n        } else if (attrName === 'customStyleFn') {\n          pluginHooks.customStyleFn = customStyleFnHook(plugins, pluginFunction);\n        } else if (attrName === 'keyBindingFn') {\n          pluginHooks.keyBindingFn = keyBindingFnHook(plugins, pluginFunction);\n        }\n      }\n    });\n  });\n  return pluginHooks;\n}\n\nvar getDecoratorLength = function getDecoratorLength(obj) {\n  if ((obj == null ? void 0 : obj.decorators) != null) {\n    var _obj$decorators;\n\n    return (_obj$decorators = obj.decorators) == null ? void 0 : _obj$decorators.size;\n  } else if ((obj == null ? void 0 : obj._decorators) != null) {\n    var _obj$_decorators;\n\n    return (_obj$_decorators = obj._decorators) == null ? void 0 : _obj$_decorators.length;\n  }\n\n  return undefined;\n};\n/**\n * The main editor component\n */\n\n\nvar PluginEditor = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(PluginEditor, _Component);\n\n  function PluginEditor(_props) {\n    var _this;\n\n    _this = _Component.call(this, _props) || this;\n    _this.editor = null;\n    _this.state = {\n      readOnly: false // TODO for Nik: ask ben why this is relevent\n\n    };\n\n    _this.onChange = function (editorState) {\n      var newEditorState = editorState;\n\n      _this.resolvePlugins().forEach(function (plugin) {\n        if (plugin.onChange) {\n          newEditorState = plugin.onChange(newEditorState, _this.getPluginMethods());\n        }\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(newEditorState);\n      }\n    };\n\n    _this.getPlugins = function () {\n      return [].concat(_this.props.plugins);\n    };\n\n    _this.getProps = function () {\n      return _extends({}, _this.props);\n    };\n\n    _this.getReadOnly = function () {\n      return _this.props.readOnly || _this.state.readOnly;\n    };\n\n    _this.setReadOnly = function (readOnly) {\n      if (readOnly !== _this.state.readOnly) {\n        _this.setState({\n          readOnly: readOnly\n        });\n      }\n    };\n\n    _this.getEditorRef = function () {\n      return _this.editor;\n    };\n\n    _this.getEditorState = function () {\n      return _this.props.editorState;\n    };\n\n    _this.getPluginMethods = function () {\n      return {\n        getPlugins: _this.getPlugins,\n        getProps: _this.getProps,\n        setEditorState: _this.onChange,\n        getEditorState: _this.getEditorState,\n        getReadOnly: _this.getReadOnly,\n        setReadOnly: _this.setReadOnly,\n        getEditorRef: _this.getEditorRef\n      };\n    };\n\n    _this.createPluginHooks = function () {\n      var plugins = [_this.props].concat(_this.resolvePlugins());\n      return createPluginHooks(plugins, _this.getPluginMethods());\n    };\n\n    _this.resolvePlugins = function () {\n      var plugins = _this.getPlugins();\n\n      if (_this.props.defaultKeyBindings === true) {\n        plugins.push({\n          keyBindingFn: keyBindingFn\n        });\n      }\n\n      if (_this.props.defaultKeyCommands === true) {\n        plugins.push({\n          handleKeyCommand: handleKeyCommand\n        });\n      }\n\n      return plugins;\n    };\n\n    _this.resolveCustomStyleMap = function () {\n      var customStyleMap = _this.props.plugins.filter(function (plug) {\n        return plug.customStyleMap !== undefined;\n      }).map(function (plug) {\n        return plug.customStyleMap;\n      });\n\n      return customStyleMap.concat([_this.props.customStyleMap]).reduce(function (styles, style) {\n        return _extends({}, styles, style);\n      }, {});\n    };\n\n    _this.resolveblockRenderMap = function () {\n      var blockRenderMap = _this.props.plugins.filter(function (plug) {\n        return plug.blockRenderMap !== undefined;\n      }).reduce(function (maps, plug) {\n        return maps.merge(plug.blockRenderMap);\n      }, Map({}));\n\n      if (_this.props.defaultBlockRenderMap) {\n        blockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n      }\n\n      if (_this.props.blockRenderMap) {\n        blockRenderMap = blockRenderMap.merge(_this.props.blockRenderMap);\n      }\n\n      return blockRenderMap;\n    };\n\n    _this.resolveAccessibilityProps = function () {\n      var accessibilityProps = {};\n\n      _this.resolvePlugins().forEach(function (plugin) {\n        if (typeof plugin.getAccessibilityProps !== 'function') {\n          return;\n        }\n\n        var props = plugin.getAccessibilityProps();\n        var popupProps = {};\n\n        if (accessibilityProps.ariaHasPopup === undefined) {\n          popupProps.ariaHasPopup = props.ariaHasPopup;\n        } else if (props.ariaHasPopup === 'true') {\n          popupProps.ariaHasPopup = 'true';\n        }\n\n        if (accessibilityProps.ariaExpanded === undefined) {\n          popupProps.ariaExpanded = props.ariaExpanded;\n        } else if (props.ariaExpanded === true) {\n          popupProps.ariaExpanded = true;\n        }\n\n        accessibilityProps = _extends({}, accessibilityProps, props, popupProps);\n      });\n\n      return accessibilityProps;\n    };\n\n    var _plugins = [_this.props].concat(_this.resolvePlugins());\n\n    _plugins.forEach(function (plugin) {\n      if (plugin && typeof plugin.initialize === 'function') {\n        plugin.initialize(_this.getPluginMethods());\n      }\n    });\n\n    return _this;\n  }\n\n  var _proto = PluginEditor.prototype;\n\n  _proto.focus = function focus() {\n    if (this.editor) {\n      this.editor.focus();\n    }\n  };\n\n  _proto.blur = function blur() {\n    if (this.editor) {\n      this.editor.blur();\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var decorator = resolveDecorators(this.props, this.getEditorState, this.onChange);\n    var editorState = EditorState.set(this.props.editorState, {\n      decorator: decorator\n    });\n    this.onChange(moveSelectionToEnd(editorState));\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var next = this.props;\n    var currDec = prevProps.editorState.getDecorator();\n    var nextDec = next.editorState.getDecorator(); // If there is not current decorator, there's nothing to carry over to the next editor state\n\n    if (!currDec) {\n      return;\n    } // If the current decorator is the same as the new one, don't call onChange to avoid infinite loops\n\n\n    if (currDec === nextDec) {\n      return;\n    } // If the old and the new decorator are the same, but no the same object, also don't call onChange to avoid infinite loops\n\n\n    if (currDec && nextDec && getDecoratorLength(currDec) === getDecoratorLength(nextDec)) {\n      return;\n    }\n\n    var editorState = EditorState.set(next.editorState, {\n      decorator: currDec\n    });\n    this.onChange(moveSelectionToEnd(editorState));\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var _this2 = this;\n\n    this.resolvePlugins().forEach(function (plugin) {\n      if (plugin.willUnmount) {\n        plugin.willUnmount({\n          getEditorState: _this2.getEditorState,\n          setEditorState: _this2.onChange\n        });\n      }\n    });\n  } // Cycle through the plugins, changing the editor state with what the plugins\n  // changed (or didn't)\n  ;\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var pluginHooks = this.createPluginHooks();\n    var customStyleMap = this.resolveCustomStyleMap();\n    var accessibilityProps = this.resolveAccessibilityProps();\n    var blockRenderMap = this.resolveblockRenderMap();\n    var _this$props = this.props;\n    _this$props.keyBindingFn;\n\n    var editorProps = _objectWithoutPropertiesLoose(_this$props, [\"keyBindingFn\"]);\n\n    return /*#__PURE__*/React.createElement(Editor, _extends({}, editorProps, accessibilityProps, pluginHooks, {\n      readOnly: this.props.readOnly || this.state.readOnly,\n      customStyleMap: customStyleMap,\n      blockRenderMap: blockRenderMap,\n      onChange: this.onChange,\n      editorState: this.props.editorState,\n      ref: function ref(element) {\n        _this3.editor = element;\n      }\n    }));\n  };\n\n  return PluginEditor;\n}(Component);\n\nPluginEditor.propTypes = {\n  editorState: PropTypes.object.isRequired,\n  onChange: PropTypes.func.isRequired,\n  plugins: PropTypes.array,\n  defaultKeyBindings: PropTypes.bool,\n  defaultKeyCommands: PropTypes.bool,\n  defaultBlockRenderMap: PropTypes.bool,\n  customStyleMap: PropTypes.object,\n  // eslint-disable-next-line react/no-unused-prop-types\n  decorators: PropTypes.array\n};\nPluginEditor.defaultProps = {\n  defaultBlockRenderMap: true,\n  defaultKeyBindings: true,\n  defaultKeyCommands: true,\n  customStyleMap: {},\n  plugins: [],\n  decorators: []\n};\nvar createEditorStateWithText$1 = createEditorStateWithText;\nvar composeDecorators$1 = composeDecorators;\nexport default PluginEditor;\nexport { composeDecorators$1 as composeDecorators, createEditorStateWithText$1 as createEditorStateWithText };","map":null,"metadata":{},"sourceType":"module"}